<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🥫🍞</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-22T12:14:24.780Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>姜春波</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Thymeleaf 使用笔记</title>
    <link href="http://example.com/2022/09/20/TemplateEngine/Thymeleaf-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/20/TemplateEngine/Thymeleaf-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-20T12:01:57.000Z</published>
    <updated>2022-09-22T12:14:24.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>如果使用 Spring Boot，默认模板引擎的路径是 <code>classpath:/template</code>，但是无法直接访问，需要通过控制器 &gt; 解析模板才可以访问。</p><blockquote><p>如果没有进行控制器跳转，那么 Spring Boot 将会使用 <code>ResourceHttpRequestHandler</code> 来处理你的请求；如果静态路径又找不到对应的资源，则返回 404.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring-Boot&quot;&gt;&lt;a href=&quot;#Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot&quot;&gt;&lt;/a&gt;Spring Boot&lt;/h2&gt;&lt;p&gt;如果使用 Spring Boot，默认模板引擎的路径是 &lt;code&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Freemarker 使用笔记</title>
    <link href="http://example.com/2022/09/20/TemplateEngine/Freemarker-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/20/TemplateEngine/Freemarker-%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-20T11:56:36.000Z</published>
    <updated>2022-09-22T12:14:24.780Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.freemarker&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.3</span><span class="number">.27</span>-incubating&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件架构的杂项记录</title>
    <link href="http://example.com/2022/09/20/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/09/20/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E7%9A%84%E6%9D%82%E9%A1%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2022-09-20T11:24:59.000Z</published>
    <updated>2022-09-22T12:14:24.780Z</updated>
    
    <content type="html"><![CDATA[<p>传统软件架构：客户层、表现层、控制层、业务逻辑层、数据库层</p><p>客户层: 一般指客户端和浏览器</p><p>表现层: 将客户端的请求提交到业务层, 将控制层的返回的数据渲染展示给客户</p><p>控制层: 等同于 MVC 中的控制层。接受表现层的请求寻找相应的业务处理</p><p>业务逻辑层：实现业务逻辑</p><p>数据库层：存放和管理用户所使用的数据</p><p>传统软件架构：客户层、表现层、控制层、业务逻辑层、数据库层</p><h2 id="多租户数据存储方案"><a href="#多租户数据存储方案" class="headerlink" title="多租户数据存储方案"></a>多租户数据存储方案</h2><ul><li>独立数据库</li></ul><p>最便捷。物理上，每个租户都单独拥有自己的一整套数据，而且是单独存放。</p><blockquote><p>具体来说，多个机器分别安装 MySQL 实例，每个企业使用单独一台机器。</p></blockquote><ul><li>共享数据库，隔离数据架构</li></ul><p>所有租户共同使用一个数据库，但是各自有各自的一套不同的数据表结构。</p><blockquote><p>具体来说，单台机器安装 MySQL，可以通过不同的 schema （库）区分，也可以通过表名区分，例如：a_user, b_user</p></blockquote><ul><li>共享数据库，共享数据架构</li></ul><p>所有租户共享同一个数据表，同一个数据表结构，存储在同一模式中。</p><blockquote><p>具体来说，将所有租户都记录在同一张表中，通过特定字段区分。例如，通过 TenantID 区别</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;传统软件架构：客户层、表现层、控制层、业务逻辑层、数据库层&lt;/p&gt;
&lt;p&gt;客户层: 一般指客户端和浏览器&lt;/p&gt;
&lt;p&gt;表现层: 将客户端的请求提交到业务层, 将控制层的返回的数据渲染展示给客户&lt;/p&gt;
&lt;p&gt;控制层: 等同于 MVC 中的控制层。接受表现层的请求寻找相应的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 日期操作问题汇总</title>
    <link href="http://example.com/2022/09/20/Java-%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2022/09/20/Java-%E6%97%A5%E6%9C%9F%E6%93%8D%E4%BD%9C%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2022-09-20T03:24:42.000Z</published>
    <updated>2022-09-22T12:14:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>获得本月第一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br></pre></td></tr></table></figure><p>获得本月最后一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">calendar.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">calendar.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;headerlink&quot; title=&quot;Date&quot;&gt;&lt;/a&gt;Date&lt;/h2&gt;&lt;p&gt;获得本月第一天&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java 线程池笔记</title>
    <link href="http://example.com/2022/09/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-14T10:40:44.000Z</published>
    <updated>2022-09-22T12:14:24.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h1><p>ThreadPoolExecutor 继承了 AbstractExecutorService，成员变量 ctl 是一个 Integer 的原子变量，用来记录线程池状态和线程池中线程个数。</p><blockquote><p>高 3 位用来表示线程池状态，低 29 位用来记录线程池线程个数。即，线程池状态理论上可以至多拥有 8 种。</p></blockquote><p>实际上，线程池的状态如下：</p><table><thead><tr><th align="left">线程池状态</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">RUNNING</td><td align="left">接收新任务并且处理阻塞队列里的任务</td></tr><tr><td align="left">SHUTDOWN</td><td align="left">拒绝新任务但是处理阻塞队列里的任务</td></tr><tr><td align="left">STOP</td><td align="left">拒绝新任务并且抛弃阻塞队列里的任务，同时会中断正在处理的任务</td></tr><tr><td align="left">TIDYING</td><td align="left">所有任务都执行完（包含阻塞队列里面的任务）后当前线程池活动线程数位 0，将要调用 terminated 方法</td></tr><tr><td align="left">TERMINATED</td><td align="left">终止状态。terminated 方法调用完成以后的状态</td></tr></tbody></table><p>线程池参数：</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">corePoolSize</td><td align="left">核心线程数，即使他们空闲也会保持在线程池中</td></tr><tr><td align="left">maximumPoolSize</td><td align="left">线程池中允许的最大线程数</td></tr><tr><td align="left">keepAliveTime</td><td align="left">保持存活时间，如果线程数超过核心线程数，而且超过的线程不在工作（空闲），他们允许有keepAliveTime 的时间存活，以便等待新任务。</td></tr><tr><td align="left">TimeUnit</td><td align="left">时长单位，用于 keepAliveTime</td></tr><tr><td align="left">workQueue</td><td align="left">用于保存等待执行的任务的阻塞队列</td></tr><tr><td align="left">threadFactory</td><td align="left">executor 用于创建线程的工厂</td></tr><tr><td align="left">RejectedExecutionHandler</td><td align="left">饱和策略，当队列满并且线程个数达到 maximunPoolSize 后采取的策略</td></tr></tbody></table><ul><li>keepAliveTime</li></ul><p>一般情况下，keepAliveTime 可以设置为 0，表示线程运行完毕立即销毁；keepAliveTime &lt; 0，初始化才会报错</p><p>如果调用了 allowCoreThreadTimeOut(true)，那么 keepAlive &lt;&#x3D; 0 就会报错，这表示允许核心线程等待任务超时，而不是常驻。</p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p><code>newFixedThreadPool</code> 创建一个核心线程个数和最大线程个数都为 nThreads 的线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//使用自定义线程创建工厂</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">                                      threadFactory);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>keepAliveTime 为 0，说明只要线程个数比核心线程个数多并且当前空闲则回收。</p><p>这里传递了 <code>new LinkedBlockingQueue&lt;Runnable&gt;()</code> 作为阻塞队列，默认大小为 <code>Integer.MAX_VALUE</code>，因此可以认为是一个无界队列。</p><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>创建一个核心线程数和最大线程数都为 1 的线程池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure><p>有界队列禁止设置长度为 0，至少是 1，因此似乎没有办法做到仅固定线程活跃，其他任务拒绝：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            THREAD_POOL_SIZE, THREAD_POOL_SIZE, <span class="number">0L</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br></pre></td></tr></table></figure><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>Executor &gt; ExecutorService &gt; AbstractExecutorService &gt; ThreadPoolExecutor</p><p>execute() 和 submit() 有什么区别？</p><ol><li><p>execute 无法返回值；submit 可以返回值</p></li><li><p>submit 底层调用了 execute</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params"><span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params"><span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">TimeUnit unit,</span></span><br><span class="line"><span class="params">BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">RejectedExecutionHandler handler)</span></span><br></pre></td></tr></table></figure><h2 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h2><p>调用 shutdown 方法后，线程池就不会再接受新的任务了，但是工作队列里面的任务还是要执行的。该方法会立即返回，并不等待队列任务完成再返回。</p><h2 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h2><p>调用 shutdownNow 方法后，线程池就不会再接受新的任务了，并且会丢弃工作队列里面的任务，正在执行的任务会被中断，该方法会立即返回，并不等待激活的任务执行完成。</p><h1 id="org-springframework-scheduling-concurrent-ThreadPoolTaskExecutor"><a href="#org-springframework-scheduling-concurrent-ThreadPoolTaskExecutor" class="headerlink" title="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"></a>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</h1><p>创建一个 Spring 线程池 ThreadPoolTaskExecutor</p><p>它暴露了Executor的配置参数作为bean属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line"><span class="comment">//配置核心线程数</span></span><br><span class="line">executor.setCorePoolSize(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//配置最大线程数</span></span><br><span class="line">executor.setMaxPoolSize(<span class="number">200</span>);</span><br><span class="line"><span class="comment">//配置队列大小</span></span><br><span class="line">executor.setQueueCapacity(<span class="number">2000000</span>);</span><br><span class="line"><span class="comment">//配置线程池中的线程的名称前缀</span></span><br><span class="line">executor.setThreadNamePrefix(<span class="string">&quot;mythread-&quot;</span>);</span><br><span class="line"><span class="comment">//线程执行时间</span></span><br><span class="line">executor.setKeepAliveSeconds(customPool.getKeepAliveSeconds());</span><br><span class="line"></span><br><span class="line"><span class="comment">// rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line"><span class="comment">// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span></span><br><span class="line">executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolRejectedPolicyHandler</span>());</span><br><span class="line"><span class="comment">//执行初始化</span></span><br><span class="line">executor.initialize();</span><br><span class="line"><span class="keyword">return</span> executor;</span><br></pre></td></tr></table></figure><h1 id="线程池-main-线程等待所有线程结束"><a href="#线程池-main-线程等待所有线程结束" class="headerlink" title="线程池 main 线程等待所有线程结束"></a>线程池 main 线程等待所有线程结束</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mainWait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    executor.setCorePoolSize(<span class="number">5</span>); <span class="comment">//核心池大小</span></span><br><span class="line">    executor.setMaxPoolSize(<span class="number">10</span>); <span class="comment">//最大线程数</span></span><br><span class="line">    executor.setQueueCapacity(<span class="number">10</span>); <span class="comment">//队列程度</span></span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;sub-thread-&quot;</span>);<span class="comment">//线程前缀名称</span></span><br><span class="line">    executor.initialize(); <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 任务数量</span></span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(count); <span class="comment">// 同步工具</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        executor.execute(() -&gt; task(countDownLatch));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;main 线程等待子线程完成...&quot;</span>);</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    System.out.println(<span class="string">&quot;main 线程工作结束.&quot;</span>);</span><br><span class="line">    executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 工作开始！&quot;</span>);</span><br><span class="line">        Thread.sleep((<span class="type">long</span>) (Math.random() * <span class="number">2000</span>));</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 工作结束！&quot;</span>);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThreadPoolExecutor&quot;&gt;&lt;a href=&quot;#ThreadPoolExecutor&quot; class=&quot;headerlink&quot; title=&quot;ThreadPoolExecutor&quot;&gt;&lt;/a&gt;ThreadPoolExecutor&lt;/h1&gt;&lt;p&gt;Thread</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SMB 协议对接</title>
    <link href="http://example.com/2022/09/14/SMB-%E5%8D%8F%E8%AE%AE%E5%AF%B9%E6%8E%A5/"/>
    <id>http://example.com/2022/09/14/SMB-%E5%8D%8F%E8%AE%AE%E5%AF%B9%E6%8E%A5/</id>
    <published>2022-09-14T07:53:39.000Z</published>
    <updated>2022-09-22T12:14:24.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><p><a href="https://github.com/hierynomus/smbj">https://github.com/hierynomus/smbj</a></p><p>fileAttributes，包含文件属性掩码<br><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca28ec38-f155-4768-81d6-4bfeb8586fc9">https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/ca28ec38-f155-4768-81d6-4bfeb8586fc9</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hierynomus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smbj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SMB 关于 Windows 的共享文件夹</p><p>如果开启了<strong>密码保护</strong>需要提供<strong>账户</strong>和<strong>密码</strong></p><p>计算机处于睡眠状态时无法访问共享目录</p><p>如果为 EveryOne 开启了访问权限，即使不存在的<strong>账户</strong>，也可以访问，此时密码应该被忽略</p><p>如果<strong>账户</strong>是系统存在的，则会进行<strong>密码</strong>认证，失败则不通过。</p><h2 id="获得一个-SMBClient"><a href="#获得一个-SMBClient" class="headerlink" title="获得一个 SMBClient"></a>获得一个 SMBClient</h2><p>无参构造器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SMBClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SMBClient</span>();</span><br></pre></td></tr></table></figure><p>自定义配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SmbConfig</span> <span class="variable">config</span> <span class="operator">=</span> SmbConfig.builder()</span><br><span class="line">        .withTimeout(<span class="number">120</span>, TimeUnit.SECONDS) <span class="comment">// Timeout sets Read, Write, and Transact timeouts (default is 60 seconds)</span></span><br><span class="line">        .withSoTimeout(<span class="number">180</span>, TimeUnit.SECONDS) <span class="comment">// Socket Timeout (default is 0 seconds, blocks forever)</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="type">SMBClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SMBClient</span>(config);</span><br></pre></td></tr></table></figure><h2 id="获得一个-Connection"><a href="#获得一个-Connection" class="headerlink" title="获得一个 Connection"></a>获得一个 Connection</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意关闭</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> client.connect(<span class="string">&quot;127.0.0.1&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 可能 client connect 超时</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getMessage(), e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获得一个-Session"><a href="#获得一个-Session" class="headerlink" title="获得一个 Session"></a>获得一个 Session</h2><p>获得一个会话示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.authenticate(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">AuthenticationContext</span>(<span class="string">&quot;USERNAME&quot;</span>, <span class="string">&quot;PASSWORD&quot;</span>.toCharArray(), <span class="literal">null</span>));</span><br></pre></td></tr></table></figure><h2 id="获得-DiskShare"><a href="#获得-DiskShare" class="headerlink" title="获得 DiskShare"></a>获得 DiskShare</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Connect to Share</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">DiskShare</span> <span class="variable">share</span> <span class="operator">=</span> (DiskShare) session.connectShare(<span class="string">&quot;shareDirectory&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (FileIdBothDirectoryInformation f : share.list(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;*.csv&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File : &quot;</span> + f.getFileName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整体-Demo"><a href="#整体-Demo" class="headerlink" title="整体 Demo"></a>整体 Demo</h2><p>获得共享名称为 shareDir 下的所有文件名信息，并输出: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1. 使用 try 语句块自动关闭资源</span></span><br><span class="line"><span class="comment">    * 2. client.connect 参数 hostname 可能导致抛出异常</span></span><br><span class="line"><span class="comment">    * 3. connection.authenticate 认证失败可能导致抛出异常</span></span><br><span class="line"><span class="comment">    * 4. session.connectShare shareName 不存在可能导致抛出异常</span></span><br><span class="line"><span class="comment">    * 5. share.list 传入的 path 错误可能导致抛出异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">SMBClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SMBClient</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> client.connect(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.authenticate(<span class="keyword">new</span> <span class="title class_">AuthenticationContext</span>(<span class="string">&quot;USERNAME&quot;</span>, <span class="string">&quot;PASSWORD&quot;</span>.toCharArray(), <span class="literal">null</span>));</span><br><span class="line">        <span class="type">DiskShare</span> <span class="variable">share</span> <span class="operator">=</span> (DiskShare) session.connectShare(<span class="string">&quot;shareDir&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (FileIdBothDirectoryInformation f : share.list(<span class="string">&quot;&quot;</span>, <span class="string">&quot;*.csv&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File : &quot;</span> + f.getFileName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="com-hierynomus-smbj-share-File"><a href="#com-hierynomus-smbj-share-File" class="headerlink" title="com.hierynomus.smbj.share.File"></a><code>com.hierynomus.smbj.share.File</code></h2><ul><li>打开一个文件（读）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">smbFileRead</span> <span class="operator">=</span> dirShare.openFile(</span><br><span class="line">    fileName, <span class="comment">// 路径</span></span><br><span class="line">    EnumSet.of(AccessMask.GENERIC_READ), <span class="comment">// Set&lt;AccessMask&gt;</span></span><br><span class="line">    <span class="literal">null</span>, <span class="comment">// Set&lt;FileAttributes&gt;</span></span><br><span class="line">    SMB2ShareAccess.ALL, <span class="comment">// Set&lt;SMB2ShareAccess&gt;</span></span><br><span class="line">    SMB2CreateDisposition.FILE_OPEN, <span class="comment">// SMB2CreateDisposition</span></span><br><span class="line">    <span class="literal">null</span>); <span class="comment">// Set&lt;SMB2CreateOptions&gt;</span></span><br></pre></td></tr></table></figure><p>SMB2CreateDisposition: 如果传递 <code>FILE_OPEN</code>，那么文件找不到的情况下会抛出异常；如果设置为 <code>FILE_OPEN_IF</code>，那么文件找不到的情况下会静默继续</p><ul><li>远程拷贝</li></ul><p>就是直接在远程机器上将一个文件拷贝到另一个文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保拷贝到的文件夹存在</span></span><br><span class="line"><span class="built_in">this</span>.ensureDirectoryExists(diskShare, dir);</span><br><span class="line">com.hierynomus.smbj.share.<span class="type">File</span> <span class="variable">backupShareFile</span> <span class="operator">=</span> diskShare.openFile(</span><br><span class="line">        <span class="string">&quot;copy-directory\\&quot;</span> + filename,</span><br><span class="line">        EnumSet.of(AccessMask.GENERIC_ALL), <span class="comment">// Set&lt;AccessMask&gt;</span></span><br><span class="line">        <span class="literal">null</span>, <span class="comment">// Set&lt;FileAttributes&gt;</span></span><br><span class="line">        SMB2ShareAccess.ALL, <span class="comment">// Set&lt;SMB2ShareAccess&gt;</span></span><br><span class="line">        SMB2CreateDisposition.FILE_CREATE, <span class="comment">// SMB2CreateDisposition</span></span><br><span class="line">        <span class="literal">null</span>);</span><br><span class="line">smbFile.remoteCopyTo(backupShareFile);</span><br></pre></td></tr></table></figure><ul><li>如何判断一个 <code>File</code> 是否是文件夹</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileIdBothDirectoryInformation</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isDirectory</span> <span class="operator">=</span> (f.getFileAttributes() &amp; <span class="number">0x10</span>) == <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// File</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">directory</span> <span class="operator">=</span> shareFile.getFileInformation().getStandardInformation().isDirectory();</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>将共享文件夹 <code>\\127.0.0.1\shareDirectory</code> 下的所有文件都转移到 <code>\\127.0.0.1\shareDirectory\backup</code> 文件夹下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transferAllFiles</span><span class="params">(String path)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SMBClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SMBClient</span>();</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> client.connect(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.authenticate(<span class="keyword">new</span> <span class="title class_">AuthenticationContext</span>(<span class="string">&quot;USERNAME&quot;</span>, <span class="string">&quot;PASSWORD&quot;</span>.toCharArray(), <span class="literal">null</span>));</span><br><span class="line">            <span class="type">DiskShare</span> <span class="variable">share</span> <span class="operator">=</span> (DiskShare) session.connectShare(<span class="string">&quot;shareDirectory&quot;</span>)) &#123;</span><br><span class="line">        List&lt;FileIdBothDirectoryInformation&gt; fileIdBothDirectoryInformationList = share.list(path, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        fileIdBothDirectoryInformationList = fileIdBothDirectoryInformationList.stream().filter(fileIdBothDirectoryInformation -&gt; &#123;</span><br><span class="line">            <span class="comment">// 过滤掉文件夹</span></span><br><span class="line">            <span class="keyword">return</span> (fileIdBothDirectoryInformation.getFileAttributes() &amp; <span class="number">0x10</span>) == <span class="number">0</span>;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (FileIdBothDirectoryInformation f : fileIdBothDirectoryInformationList) &#123;</span><br><span class="line">            com.hierynomus.smbj.share.<span class="type">File</span> <span class="variable">shareFile</span> <span class="operator">=</span> share.openFile(</span><br><span class="line">                    path + <span class="string">&quot;\\&quot;</span> + f.getFileName(), <span class="comment">// 路径</span></span><br><span class="line">                    EnumSet.of(AccessMask.GENERIC_ALL), <span class="comment">// Set&lt;AccessMask&gt;</span></span><br><span class="line">                    <span class="literal">null</span>, <span class="comment">// Set&lt;FileAttributes&gt;</span></span><br><span class="line">                    SMB2ShareAccess.ALL, <span class="comment">// Set&lt;SMB2ShareAccess&gt;</span></span><br><span class="line">                    SMB2CreateDisposition.FILE_OPEN, <span class="comment">// SMB2CreateDisposition</span></span><br><span class="line">                    <span class="literal">null</span>); <span class="comment">// Set&lt;SMB2CreateOptions&gt;</span></span><br><span class="line">            com.hierynomus.smbj.share.<span class="type">File</span> <span class="variable">backupShareFile</span> <span class="operator">=</span> share.openFile(</span><br><span class="line">                    path + <span class="string">&quot;\\backup\\&quot;</span> + f.getFileName(),</span><br><span class="line">                    EnumSet.of(AccessMask.GENERIC_ALL), <span class="comment">// Set&lt;AccessMask&gt;</span></span><br><span class="line">                    <span class="literal">null</span>, <span class="comment">// Set&lt;FileAttributes&gt;</span></span><br><span class="line">                    SMB2ShareAccess.ALL, <span class="comment">// Set&lt;SMB2ShareAccess&gt;</span></span><br><span class="line">                    SMB2CreateDisposition.FILE_CREATE, <span class="comment">// SMB2CreateDisposition</span></span><br><span class="line">                    <span class="literal">null</span>);</span><br><span class="line">            shareFile.remoteCopyTo(backupShareFile);</span><br><span class="line">            <span class="comment">// 最后要删掉</span></span><br><span class="line">            shareFile.deleteOnClose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考引用&quot;&gt;&lt;a href=&quot;#参考引用&quot; class=&quot;headerlink&quot; title=&quot;参考引用&quot;&gt;&lt;/a&gt;参考引用&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hierynomus/smbj&quot;&gt;https://github.co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Maven 笔记</title>
    <link href="http://example.com/2022/09/08/maven/Maven-%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/09/08/maven/Maven-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-07T16:06:31.000Z</published>
    <updated>2022-09-22T12:14:24.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven-笔记"><a href="#Maven-笔记" class="headerlink" title="Maven 笔记"></a>Maven 笔记</h1><h2 id="Maven-是什么"><a href="#Maven-是什么" class="headerlink" title="Maven 是什么"></a>Maven 是什么</h2><p><a href="https://maven.apache.org/what-is-maven.html">官方介绍 What is  Maven?</a></p><p>Maven 是 Apache 软件基金会唯一维护的一款【自动化构建工具】。专注于 Java 平台的【项目构建】和【项目管理】</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Maven 为构建管理带来的强大的额外特性就是项目继承 (Inheritance) 的概念。</p><p>对于父工程和聚合 (多模块) 工程，<code>packaging</code> 类型必须是 <code>pom</code>。这些类型定义了绑定到一组生命周期阶段的目标。例如，如果 packaging 是 <code>jar</code>, 那么 <code>package</code> 阶段就会执行 <code>jar:jar</code> 目标。</p><p>请注意 <code>relativePath</code> 元素。它不是必需的，但是它可以作为一个指示器，告诉 Maven 在搜索本地以及远程仓库之前，首先搜索该工程的父工程给定的路径。</p><blockquote><p>个人感觉 <code>relativePath</code> 使用场景很小</p></blockquote><h2 id="构建项目的主要环节"><a href="#构建项目的主要环节" class="headerlink" title="构建项目的主要环节"></a>构建项目的主要环节</h2><ul><li>clean：清理，删除以前的编译结果</li><li>compile：编译，将 Java 源程序编译为字节码</li><li>test：对项目进行测试</li><li>package：将项目进行打包，以 jar 或 war 格式。</li><li>install：将打包的结果 jar 或者 war 安装到本地仓库。</li><li>deploy：将打包的结果部署到远程仓库或者 war 包部署到服务器上运行</li></ul><h2 id="Maven-常用命令"><a href="#Maven-常用命令" class="headerlink" title="Maven 常用命令"></a>Maven 常用命令</h2><p><code>mvn -version / mvn -v</code> 显示版本信息<br><code>mvn clean</code> 清理<br><code>mvn compile</code> 编译<br><code>mvn test</code> 编译并测试<br><code>mvn package</code> 生成 target 目录，编译、测试代码，生成测试报告，生成 jar&#x2F;war<br><code>mvn site</code> 生成项目相关信息的网站<br><code>mvn clean compile</code> 清理之后编译<br><code>mvn clean package</code> 清理之后打包<br><code>mvn clean install</code> 清理之后安装<br><code>mvn clean deploy</code> 清理之后发布</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><h3 id="依赖的范围"><a href="#依赖的范围" class="headerlink" title="依赖的范围"></a>依赖的范围</h3><p>依赖范围 <code>&lt;scope&gt;</code> 控制哪些依赖在哪些 classpath 中可用，哪些依赖包含在一个应用中。</p><p>【compile】默认的范围；编译范围依赖在所有的 classpath 中可用，同时它们也会被打包。</p><p>【provided】provided 依赖只有在当 JDK 或者一个容器已提供该依赖之后才使用。例如， 如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的 Servlet API 来编译一个 servlet，但是你不会想要在打包好的 WAR 中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。</p><p>或者还有 lombok 的使用，打包完毕之后便不再需要包含这个 API。</p><p>【runtime】 runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC 驱动实现。</p><p>【test】 test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p><p>【system】 system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中JAR文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构建应该是一直可用的，Maven 也不会在仓库中去寻找它。如果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注意该范围是不推荐使用的（建议尽量去从公共或定制的 Maven 仓库中引用依赖）。</p><p>【import】 import 仅支持在 <code>&lt;dependencyManagement&gt;</code> 中的类型依赖项上。该选项可以用来解决 Maven 的单继承。</p><p>通常，我们会使用 spring-boot-starter-parent 作为项目的父工程，因为其中进行了很多版本管理，同时我们也希望引入其他版本管理的工程，如 spring-cloud、spring-cloud-alibaba。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-version-gt"><a href="#lt-version-gt" class="headerlink" title="&lt;version&gt;"></a><code>&lt;version&gt;</code></h3><ul><li><code>&lt;parent&gt;</code> 标签下的 <code>&lt;version&gt;</code></li></ul><p>Snapshot版本代表不稳定、尚处于开发中的版本  Release版本则代表稳定的版本<br>如果 deploy 到远程服务器 如果是 release 只能 deploy 一次，以后部署的话，就会报错冲突，因为是稳定版<br>但是如果是 snapshot 的话，你可以 deploy 多次，每一次都会冲掉原来的版本，表示不稳定</p><ul><li><code>&lt;dependency&gt;</code> 下的 <code>&lt;version&gt;</code></li></ul><p>显式设置依赖的版本</p><h3 id="lt-dependencyManagement-gt"><a href="#lt-dependencyManagement-gt" class="headerlink" title="&lt;dependencyManagement &gt;"></a><code>&lt;dependencyManagement &gt;</code></h3><p>Maven 使用 dependencyManagement 元素来提供一种管理<strong>依赖版本</strong>的方式。通常会在一个组织或项目的最顶层的父 POM 中看到。</p><p>使用 pom.xml 中的 <code>&lt;dependencyManagement &gt; </code>能让所有在子项目中引用一个依赖而不用显式地写 <code>&lt;version&gt;</code>，Maven 会沿着父子层次向上找，直到找到一个拥有 dependencyManagement 元素的项目，然后它就会使用这个版本号。</p><p>dependencyManagement 只是声明依赖，并不引入依赖，因此子项目需要显式进行依赖引入。</p><h3 id="lt-optional-gt"><a href="#lt-optional-gt" class="headerlink" title="&lt;optional&gt;"></a><code>&lt;optional&gt;</code></h3><p>默认为 false，optional 标签 设置为true 可以防止依赖继承到 jar 包，比如 spring-boot-devtools</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Maven-笔记&quot;&gt;&lt;a href=&quot;#Maven-笔记&quot; class=&quot;headerlink&quot; title=&quot;Maven 笔记&quot;&gt;&lt;/a&gt;Maven 笔记&lt;/h1&gt;&lt;h2 id=&quot;Maven-是什么&quot;&gt;&lt;a href=&quot;#Maven-是什么&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Framework Data Access</title>
    <link href="http://example.com/2022/08/26/Spring-Framework/Spring-Framework-Data-Access/"/>
    <id>http://example.com/2022/08/26/Spring-Framework/Spring-Framework-Data-Access/</id>
    <published>2022-08-26T03:50:01.000Z</published>
    <updated>2022-09-22T12:14:24.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-Access"><a href="#Data-Access" class="headerlink" title="Data Access"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#spring-data-tier">Data Access</a></h1><hr><h2 id="1-Transaction-Management"><a href="#1-Transaction-Management" class="headerlink" title="1. Transaction Management"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction">1. Transaction Management</a></h2><h3 id="1-1-Advantages-of-the-Spring-Framework’s-Transaction-Support-Model"><a href="#1-1-Advantages-of-the-Spring-Framework’s-Transaction-Support-Model" class="headerlink" title="1.1. Advantages of the Spring Framework’s Transaction Support Model"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-motivation">1.1. Advantages of the Spring Framework’s Transaction Support Model</a></h3><h3 id="1-1-1-Global-Transactions"><a href="#1-1-1-Global-Transactions" class="headerlink" title="1.1.1. Global Transactions"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-global">1.1.1. Global Transactions</a></h3><h2 id="1-2-Understanding-the-Spring-Framework-Transaction-Abstraction"><a href="#1-2-Understanding-the-Spring-Framework-Transaction-Abstraction" class="headerlink" title="1.2. Understanding the Spring Framework Transaction Abstraction"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-strategies">1.2. Understanding the Spring Framework Transaction Abstraction</a></h2><p>Spring 事务抽象的关键在于事务策略概念。事务策略被定义在 <code>TransactionManager</code>，特别是，PlatformTransactionManager 用于命令式事务管理和 ReactiveTransactionManager 用于响应式事务管理。</p><p>PlatformTransactionManager 类似 Spring Framework IoC 容器的其他 bean。这种好处是，让 Spring Framework 事务称为一个抽象，即使你使用 JTA。你可以比直接使用 JTA 更轻松地测试事务代码。</p><p>同样，在 Spring 中，可以被任何 PlatformTransactionManager 接口额方法抛出的 TransactionException 是未检查的（也就是继承于 RuntimeException）。事务基础架构的错误总是致命的。在罕见的情况下，应用程序的代码可以从事务发生的故障中恢复，开发人员仍然可以选择 catch 和处理 TransactionException。</p><p><code>TransactionDefinition</code> 接口指定如下内容：</p><ul><li>Propagation：通常，在一个事务范围中的所有代码运行在那个事务中。但是，如果当一个事务上下文已经存在时，运行了一个事务方法，则可以指定这种行为。例如，代码可以继续运行在现有事务中（通常的情况），或者暂停已存在的事务，创建一个新的事务。</li><li>Isolation：隔离级别。该事务从其他事务的工作中隔离的程度。</li><li>Timeout：超时。在超时之前该事务可以运行的时间，并且会自动由事务底层机制回滚。</li><li>Read-only status：你可以在代码读取但不修改数据时使用只读状态。在某些情况下，只读事务时有用的优化，如 Hibernate。</li></ul><p>这些设置反映了标准的事务概念。</p><h3 id="1-4-Declarative-Transaction-Management"><a href="#1-4-Declarative-Transaction-Management" class="headerlink" title="1.4. Declarative Transaction Management"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-declarative">1.4. Declarative Transaction Management</a></h3><blockquote><p>大多数 Spring 框架用户选择声明式事务管理。此选项对应用程序代码影响最小，是最符合非侵入式轻量容器的理想方式。</p></blockquote><p>基于 Spring 面向切面编程（AOP），Spring 框架的声明式事务管理是可能的。但是，由于事务切面代码随着 Spring Framework 发布而来，并且可以在样板中使用，AOP 的概念没有必要理解为充分利用这段代码。</p><p>Spring Framework 的声明式事务管理类似于 EJB CMT，因此你可以指定事务行为到单个方法级别。如有必要，你可以在事务上下文中调用 setRollBackOnly()。</p><h4 id="1-4-1-Understanding-the-Spring-Framework’s-Declarative-Transaction-Implementation"><a href="#1-4-1-Understanding-the-Spring-Framework’s-Declarative-Transaction-Implementation" class="headerlink" title="1.4.1. Understanding the Spring Framework’s Declarative Transaction Implementation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-decl-explained">1.4.1. Understanding the Spring Framework’s Declarative Transaction Implementation</a></h4><p>仅仅使用 <code>@Transactional</code> 注解是没有用的，还需要添加 <code>@EnableTransactionManagement</code> 到配置类中。</p><p>掌握 Spring Framework 声明式事务支持最重要的概念是通过 AOP 代理开启的支持和由元数据（XML 或者 注解）驱动的 transactional advice。AOP 和事务元数据的组合产生了 AOP 代理，其使用 TransactionInterceptor 与适当的 TransactionManager 实现来驱动围绕方法调用事务。</p><p>Spring 框架的 <code>TransactionInterceptor</code> 为命令式和响应式编程模型提供事务管理。拦截器通过检查方法返回类型来检测所需的事务管理。</p><h4 id="1-4-6-Using-Transactional"><a href="#1-4-6-Using-Transactional" class="headerlink" title="1.4.6. Using @Transactional"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-declarative-annotations">1.4.6. Using @Transactional</a></h4><p>除了基于注解的声明式方式进行事务配置之外，你还可以使用基于注解的方式。直接在 Java 代码中声明事务语义上更贴近受影响的代码。</p><p>使用在类级别上，表示注解默认作用域声明类的所有方法（包括子类）。或者，每个方法可以被单独注解。注意，类级别的注解不会使用祖先类到类的层次结构；在这样的场景中，需要在本地重新声明，一边参与子类级注解。</p><p>在 xml 配种，标签 <code>&lt;tx:annotation-driven/&gt;</code>提供相似的简便方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果你想绑定的 <code>TransactionManager</code> 名称就是 <code>transactionManager</code>，你可以省略配置 <code>&lt;tx:annotation-driven/&gt;</code> 标签中的 <code>transaction-manager</code> 属性；否则你不得不指定 <code>transaction-manager</code> 属性。</li></ul></blockquote><h5 id="Transactional-Settings"><a href="#Transactional-Settings" class="headerlink" title="@Transactional Settings"></a>@Transactional Settings</h5><p><code>@Transactional</code> 注解是指定接口，类或者方法必须具有事务语义。默认的 <code>@Transactional</code> 设置如下：</p><ul><li>传播类型 <code>PROPAGATION_REQUIRED</code></li><li>隔离级别 <code>ISOLATION_DEFAULT</code></li><li>事务是读写型</li><li>事务超时默认为底层事务系统的默认超时时间，如果不支持超时，则没有</li><li>任何 <code>RuntimeException</code> 触发回滚，任何检查型 <code>Exception</code> 并不会。</li></ul><p>&amp;nbsp;</p><h5 id="Custom-Composed-Annotations"><a href="#Custom-Composed-Annotations" class="headerlink" title="Custom Composed Annotations"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-custom-attributes">Custom Composed Annotations</a></h5><h4 id="1-4-7-Transaction-Propagation"><a href="#1-4-7-Transaction-Propagation" class="headerlink" title="1.4.7. Transaction Propagation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-propagation">1.4.7. Transaction Propagation</a></h4><p>本节描述 Spring 中事务传播的一些语义。请注意，本节不是对事务传播本身的介绍。相反，它详细描述了 Spring 中关于事务传播的一些语义。</p><p>在 Spring 管理的事务中，要注意物理事务和逻辑事务之间的区别，以及传播设置如何应用的区别。</p><h5 id="Understanding-PROPAGATION-REQUIRED"><a href="#Understanding-PROPAGATION-REQUIRED" class="headerlink" title="Understanding PROPAGATION_REQUIRED"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-propagation-required">Understanding <code>PROPAGATION_REQUIRED</code></a></h5><img src="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/images/tx_prop_required.png"><p><code>PROPAGATION_REQUIRED</code> 强制执行一个物理事务，如果不存在事务，则本地为当前范围开启事务，或者参与定义为更大范围的已经存在的外部事务。在同一个线程内的公用调用栈安排中，这是一个很好的默认值（例如，一个委托给几个仓库方法的服务门面，其中所有的底层资源都必须参与服务级别事务）</p><p>当传播设置为 <code>PROPAGATION_REQUIRED</code> 时，会为每个设置应用的方法创建一个逻辑事务范围。每个此类逻辑事务范围可以单独决定仅回滚状态，外部事务范围逻辑上独立于内部事务范围。在标准的 <code>PROPAGATION_REQUIRED</code> 行为下，所有这些范围都映射相同的物理事务。内部事务范围的仅回滚标记确实会影响到外部事务实际提交的机会。</p><h5 id="Understanding-PROPAGATION-REQUIRES-NEW"><a href="#Understanding-PROPAGATION-REQUIRES-NEW" class="headerlink" title="Understanding PROPAGATION_REQUIRES_NEW"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-propagation-requires_new">Understanding <code>PROPAGATION_REQUIRES_NEW</code></a></h5><p>相较于 <code>PROPAGATION_REQUIRED</code>，<code>PROPAGATION_REQUIRES_NEW</code> 总是为每个受影响的事务范围使用独立的物理事务，从不参与到外部范围的现有事务中去。在这种安排下，底层资源事务是不同的，因此，可以独立提交、回滚，外部事务不受内部事务回滚状态影响，并且内部事务的锁在完成后立即释放。这种独立的内部事务也可以声明自己的隔离级别，超时，以及是否只读，而不继承外部事物的特征。</p><h5 id="Understanding-PROPAGATION-NESTED"><a href="#Understanding-PROPAGATION-NESTED" class="headerlink" title="Understanding PROPAGATION_NESTED"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-propagation-nested">Understanding <code>PROPAGATION_NESTED</code></a></h5><p><code>PROPAGATION_NESTED</code> 使用一个具有多个可以回滚保存点的物理事务。这种部分回滚让内部事务范围触发其范围内的回滚，并且即使某些操作已经回滚，外部事务仍能够继续物理事务。这个设置通常映射到 JDBC 保存点，因此它只适用于 JDBC 资源事务。参见 Spring 的 <a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/javadoc-api/org/springframework/jdbc/datasource/DataSourceTransactionManager.html"><code>DataSourceTransactionManager</code></a></p><h4 id="1-5-3-Using-the-TransactionManager"><a href="#1-5-3-Using-the-TransactionManager" class="headerlink" title="1.5.3. Using the TransactionManager"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-programmatic-tm">1.5.3. Using the TransactionManager</a></h4><h5 id="Using-the-PlatformTransactionManager"><a href="#Using-the-PlatformTransactionManager" class="headerlink" title="Using the PlatformTransactionManager"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-programmatic-ptm">Using the PlatformTransactionManager</a></h5><p>对于强制性的事务，你可以直接使用 <code>org.springframework.transaction.PlatformTransactionManager</code> 来管理事务。为此，将你要使用的 <code>PlatformTransactionManager</code> 的实现类传递给你的 bean。然后，通过使用 <code>TransactionDefinition</code> 和 <code>TransactionStatus</code> 对象，你可以启动，回滚以及提交事务。</p><h5 id="Using-the-ReactiveTransactionManager"><a href="#Using-the-ReactiveTransactionManager" class="headerlink" title="Using the ReactiveTransactionManager"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#transaction-programmatic-rtm">Using the ReactiveTransactionManager</a></h5><p>当使用响应式事务时，你可以直接使用 <code>org.springframework.transaction.ReactiveTransactionManager</code> 管理你的事务。</p><h3 id="1-6-Choosing-Between-Programmatic-and-Declarative-Transaction-Management"><a href="#1-6-Choosing-Between-Programmatic-and-Declarative-Transaction-Management" class="headerlink" title="1.6. Choosing Between Programmatic and Declarative Transaction Management"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#tx-decl-vs-prog">1.6. Choosing Between Programmatic and Declarative Transaction Management</a></h3><p>当你具有少量的事务操作时，编程式事务管理通常是个不错的主意。</p><p>&amp;nbsp;</p><h2 id="2-DAO-Support"><a href="#2-DAO-Support" class="headerlink" title="2. DAO Support"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#dao">2. DAO Support</a></h2><h3 id="2-1-Consistent-Exception-Hierarchy"><a href="#2-1-Consistent-Exception-Hierarchy" class="headerlink" title="2.1. Consistent Exception Hierarchy"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#dao-exceptions">2.1. Consistent Exception Hierarchy</a></h3><p>Spring 提供了特定异常到自己异常类层次结构的转换。该类层次结构将 <code>DataAccessException</code> 作为根异常。</p><h2 id="3-Data-Access-with-JDBC"><a href="#3-Data-Access-with-JDBC" class="headerlink" title="3. Data Access with JDBC"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc">3. Data Access with JDBC</a></h2><h3 id="3-1-Choosing-an-Approach-for-JDBC-Database-Access"><a href="#3-1-Choosing-an-Approach-for-JDBC-Database-Access" class="headerlink" title="3.1. Choosing an Approach for JDBC Database Access"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-choose-style">3.1. Choosing an Approach for JDBC Database Access</a></h3><p>你可以选择及中方来构建 JDBC 数据库访问基础。除了三种 JdbcTemplate 之外，一个新的 SimpleJdbcInsert 和 SimpleJdbcCall 方法优化了数据库元数据，并且 RDBMS 对象风格采取了一种更面向对象的方式，类似于 JDO 查询设计。</p><ul><li><code>JdbcTemplate</code> 是经典且最流行的 Spring JDBC 方式。这种 “最低级别” 的方法和所有其他封装的方法使用 <code>JdbcTemplate</code></li><li><code>NamedParameterJdbcTemplate</code> 包装了一个 <code>JdbcTemplate</code> 以提供命名参数而不是传统的 JDBC ? 占位符。当你的 SQL 语句有多个参数时，这种方法提供了更好的文档性且易于使用。</li><li><code>SimpleJdbcInsert</code> 和 <code>SimpleJdbcCall</code> 优化了数据库元数据来限制必要配置的数量。这种方法简化了编码，你只需要提供表名称，或者存储过程名称，并且提供一个参数与列名匹配的映射。</li></ul><h3 id="3-3-Using-the-JDBC-Core-Classes-to-Control-Basic-JDBC-Processing-and-Error-Handling"><a href="#3-3-Using-the-JDBC-Core-Classes-to-Control-Basic-JDBC-Processing-and-Error-Handling" class="headerlink" title="3.3. Using the JDBC Core Classes to Control Basic JDBC Processing and Error Handling"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-core">3.3. Using the JDBC Core Classes to Control Basic JDBC Processing and Error Handling</a></h3><h4 id="3-3-1-Using-JdbcTemplate"><a href="#3-3-1-Using-JdbcTemplate" class="headerlink" title="3.3.1. Using JdbcTemplate"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-JdbcTemplate">3.3.1. Using JdbcTemplate</a></h4><p><code>JdbcTemplate</code> 是 JDBC <code>core</code> 包下的核心类。它处理资源的创建与释放，这可以帮助你避免一些常见的错误，比如忘记关闭连接。它执行核心 JDBC 工作流的基本任务（如语句的创建和执行），让应用程序代码来提供 SQL 和获取结果集。</p><p><code>JdbcTemplate</code> 可以做如下的事情：</p><ul><li>运行 SQL 查询</li><li>更新语句以及存储过程调用</li><li>执行 <code>ResultSet</code> 的迭代，以及提取返回参数值的结果</li><li>捕获 JDBC 异常，并将其转换为定义在 <code>org.springframework.dao</code> 包下的更通用，更具信息意义的异常层次</li></ul><p>当你使用 <code>JdbcTemplate</code> 时，你只需要实现一个回调接口，给出明确定义的约定。给定一个 <code>JdbcTemplate</code> 类提供的 <code>Connection</code>，<code>PreparedStatementCreator</code> 回调接口会创建一个 预编译的语句，提供了 SQL 以及任何必要的参数。<code>CallableStatementCreator</code> 接口也是如此，它创建可调用的语句。<code>RowCallbackHandler</code> 接口从 <code>ResultSet</code> 的每一行中提取值。</p><p>你可以在你的 DAO 实现中通过给予一个 <code>DataSource</code> 的引用直接实例化 <code>JdbcTempalte</code> 并使用；或者，你可以配置它到 Spring IoC 容器里，并将其作为一个 bean 引用给 DAO。</p><blockquote><p><code>DataSource</code> 应当总是配置为一个 Spring Ioc 容器中的 bean。</p></blockquote><p>此类发出的所有 SQL 都以 debug 级别的日志记录下来，</p><h5 id="Querying-SELECT"><a href="#Querying-SELECT" class="headerlink" title="Querying (SELECT)"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-JdbcTemplate-examples-query">Querying (SELECT)</a></h5><h5 id="Updating-INSERT-UPDATE-and-DELETE-with-JdbcTemplate"><a href="#Updating-INSERT-UPDATE-and-DELETE-with-JdbcTemplate" class="headerlink" title="Updating (INSERT, UPDATE, and DELETE) with JdbcTemplate"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-JdbcTemplate-examples-update">Updating (INSERT, UPDATE, and DELETE) with JdbcTemplate</a></h5><h4 id="3-3-3-Using-SQLExceptionTranslator"><a href="#3-3-3-Using-SQLExceptionTranslator" class="headerlink" title="3.3.3. Using SQLExceptionTranslator"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/data-access.html#jdbc-SQLExceptionTranslator">3.3.3. Using SQLExceptionTranslator</a></h4><p>SQLExceptionTranslator 是一个接口，用于 SQLExceptions 和 Spring 的 DataAccessException 之间进行转换。</p><p>SQLErrorCodeSQLExceptionTranslator 是 SQLExceptionTranslator 默认的实现。此实现使用特定的供应商代码，比 SQLState 更精确。错误代码转换基于名为 SQLErrorCodes 的 JavaBean 类中保存的代码。此类由 SQLErrorCodesFactory 创建和填充，是基于 sql-error-codes.xml 的配置文件的内容创建的工厂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Data-Access&quot;&gt;&lt;a href=&quot;#Data-Access&quot; class=&quot;headerlink&quot; title=&quot;Data Access&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring 请求参数处理实践</title>
    <link href="http://example.com/2022/08/17/Spring-Framework/Spring-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2022/08/17/Spring-Framework/Spring-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-08-17T07:37:26.000Z</published>
    <updated>2022-09-22T12:14:24.778Z</updated>
    
    <content type="html"><![CDATA[<p>场景描述：请求 Content Type 为 <code>application/x-www-form-urlencoded</code>，即参数以键值对形式传递，其中有简单类型，如：数字，字符串，也有 JSON 类型，需要绑定到 Spring 的模型中，完成校验。</p><p>参数格式参考如下，为了便于显示，进行了换行: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lesson_date=2022-08-08</span><br><span class="line">&amp;lesson_period_id=1</span><br><span class="line">&amp;subject_id=1</span><br><span class="line">&amp;grade_id=1</span><br><span class="line">&amp;class_id=1</span><br><span class="line">&amp;teacher_id=1</span><br><span class="line">&amp;student_list=[&#123;<span class="string">&quot;x&quot;</span>:0,<span class="string">&quot;y&quot;</span>:0,<span class="string">&quot;speak_num&quot;</span>:0,<span class="string">&quot;distract_num&quot;</span>:0,<span class="string">&quot;is_special&quot;</span>:0&#125;]</span><br></pre></td></tr></table></figure><p>如何支持下划线传参映射到 Model 模型? 装饰器模式 Request</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiParamCaseRequest</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String[]&gt; additionalParams;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MultiParamCaseRequest</span><span class="params">(HttpServletRequest request, Map&lt;String, String[]&gt; additionalParams)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        <span class="built_in">this</span>.additionalParams = additionalParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getParameterNames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> HashSet&lt;String&gt; parameterNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        parameterNames.addAll(getRequest().getParameterMap().keySet());</span><br><span class="line">        parameterNames.addAll(additionalParams.keySet());</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(parameterNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="built_in">super</span>.getParameter(name);</span><br><span class="line">        <span class="keyword">if</span> (parameter != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parameter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String[] parameterValues = additionalParams.get(name);</span><br><span class="line">        <span class="keyword">if</span> (parameterValues != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameterValues.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parameterValues[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] parameterValues = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (parameterValues != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parameterValues;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> additionalParams.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamNameExtensionFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">underLinePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;_(\\w)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; additionalParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">parameterName</span> <span class="operator">=</span> parameterNames.nextElement();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">camelCaseParameterName</span> <span class="operator">=</span> <span class="built_in">this</span>.underLineToCamel(parameterName);</span><br><span class="line">            <span class="keyword">if</span> (parameterName.equals(camelCaseParameterName)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> String[] values = parameterMap.get(parameterName);</span><br><span class="line">            additionalParams.put(camelCaseParameterName, values);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">MultiParamCaseRequest</span> <span class="variable">multiParamCaseRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultiParamCaseRequest</span>(request, additionalParams);</span><br><span class="line">        chain.doFilter(multiParamCaseRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">underLineToCamel</span><span class="params">(<span class="keyword">final</span> String value)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> <span class="built_in">this</span>.underLinePattern.matcher(value);</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            m.appendReplacement(sb, m.group(<span class="number">1</span>).toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        m.appendTail(sb);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Model 对象包含 <code>Collection</code>，需要定制 DataBinder:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder dataBinder)</span> &#123;</span><br><span class="line">    dataBinder.registerCustomEditor(List.class, <span class="string">&quot;studentList&quot;</span>, <span class="keyword">new</span> <span class="title class_">PropertyEditorSupport</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(text)) &#123;</span><br><span class="line">                setValue(Collections.EMPTY_LIST);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    setValue(objectMapper.readValue(text, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;EvaluationVO.Student&gt;&gt;() &#123;</span><br><span class="line">                    &#125;));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;场景描述：请求 Content Type 为 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;，即参数以键值对形式传递，其中有简单类型，如：数字，字符串，也有 JSON 类型，需要绑定到 Spring 的模型中，完成校验。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis Generator 笔记</title>
    <link href="http://example.com/2022/08/16/MyBatis/MyBatis-Generator-%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/08/16/MyBatis/MyBatis-Generator-%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-16T10:00:58.000Z</published>
    <updated>2022-09-22T12:14:24.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis-Generator-笔记"><a href="#MyBatis-Generator-笔记" class="headerlink" title="MyBatis Generator 笔记"></a>MyBatis Generator 笔记</h1><h2 id="XML-配置参考"><a href="#XML-配置参考" class="headerlink" title="XML 配置参考"></a>XML 配置参考</h2><h3 id="lt-context-gt-元素"><a href="#lt-context-gt-元素" class="headerlink" title="&lt;context&gt; 元素"></a><code>&lt;context&gt;</code> 元素</h3><h4 id="必需的属性"><a href="#必需的属性" class="headerlink" title="必需的属性"></a>必需的属性</h4><ul><li>id</li></ul><p>该上下文的唯一标识符。该值将会在一些错误信息中使用到。</p><h4 id="可选的属性"><a href="#可选的属性" class="headerlink" title="可选的属性"></a>可选的属性</h4><ul><li>defaultModelType</li></ul><p>如果 targer runtime 是 MyBatis3Simple, MyBatis3DynamicSql, 或者 MyBatis3Kotlin，该属性会被忽略。</p><ul><li>targetRuntime</li></ul><p>该属性用于生成代码的运行时目标。</p><p><strong>MyBatisDynamicSql</strong></p><h4 id="支持的属性"><a href="#支持的属性" class="headerlink" title="支持的属性"></a>支持的属性</h4><ul><li><p>beginningDelimiter</p></li><li><p>endingDelimiter</p></li></ul><h3 id="lt-javaClientGenerator-gt-元素"><a href="#lt-javaClientGenerator-gt-元素" class="headerlink" title="&lt;javaClientGenerator&gt; 元素"></a><code>&lt;javaClientGenerator&gt;</code> 元素</h3><p><code>&lt;javaClientGenerator&gt;</code> 元素用于定义 Java 客户端生成器的属性。</p><h4 id="必需的属性-1"><a href="#必需的属性-1" class="headerlink" title="必需的属性"></a>必需的属性</h4><ul><li>type</li></ul><p>该属性用来选择预定义的 Java 客户端生成器之一，或者指定一个用户提供的 Java 客户端生成器。</p><p><strong>XMLMAPPER</strong></p><p>生成的对象是 MyBatis 3.x mapper 基础设施的 Java 接口。接口将依赖于生成的 XML mapper 文件。</p><ul><li>targetPackage</li></ul><p>这是生成的接口和实现类所在的包。</p><ul><li>targetProject</li></ul><p>这用于为生成的接口和类指定目标项目。</p><h3 id="lt-javaModelGenerator-gt-元素"><a href="#lt-javaModelGenerator-gt-元素" class="headerlink" title="&lt;javaModelGenerator&gt; 元素"></a><code>&lt;javaModelGenerator&gt;</code> 元素</h3><p><code>&lt;javaModelGenerator&gt;</code> 元素用于定义 Java 模型生成器的属性。Java 模型生成器构建主键类，记录类，以及与自省表匹配的按照 Example 类查询。该元素是 <code>&lt;context&gt;</code> 元素必须的子元素。</p><h4 id="必需的属性-2"><a href="#必需的属性-2" class="headerlink" title="必需的属性"></a>必需的属性</h4><ul><li>targetPackage</li></ul><p>这是生成的类将被放置的包。在默认的生成器中，属性 “enableSubPackages” 控制如何计算实际的包。如果为 true，则计算出的包是 targetPackage 加上表的 catalog 和 schema 的子包（如果存在）。</p><ul><li>targetProject</li></ul><p>这用于为生成的对象指定目标项目。在 Eclipse 环境中运行时，这将会指定保存对象的项目和源文件夹。在其他环境中，该值应该是本地文件系统上的已经存在的目录。如果此目录不存在， MyBatis Generator 将不会创建此目录。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>创建配置文件，比如在 resources&#x2F;mybatis-generator&#x2F; 下面创建 generatorConfig.xml 配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;mybatis-generator/generator.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span>  <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--注释--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否压制时间戳--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注解采用数据库的标注，suppressAllComments 必须设置为 false 才会生效 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/xxx?characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">&quot;xxx&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- mysql 获取数据库注解的方式，想要获取数据库注解必须添加 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useInformationSchema&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 实体类的包名和存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件*.xml的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- tableName：数据库中的表名或视图名；domainObjectName：生成的实体类的类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;book&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Book&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>字段名和关键字冲突问题</li></ul><p>配置界定符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>&gt;</span>&lt;/property &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>&gt;</span>&lt;/property &gt;</span><br></pre></td></tr></table></figure><p>在 table 节点添加属性 <code>delimitAllColumns=&quot;true&quot;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MyBatis-Generator-笔记&quot;&gt;&lt;a href=&quot;#MyBatis-Generator-笔记&quot; class=&quot;headerlink&quot; title=&quot;MyBatis Generator 笔记&quot;&gt;&lt;/a&gt;MyBatis Generator 笔记&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 Authorization Server 设计</title>
    <link href="http://example.com/2022/08/12/Security/OAuth-2-0-Authorization-Server-%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/08/12/Security/OAuth-2-0-Authorization-Server-%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-08-12T00:53:36.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 Client 设计</title>
    <link href="http://example.com/2022/08/04/Security/OAuth-2.0-Client-%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/08/04/Security/OAuth-2.0-Client-%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-08-04T15:27:25.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot web starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.oltu.oauth2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.oltu.oauth2.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><ul><li><p>AuthorizationServerConfig<br>接口，提供各个授权服务器的基本配置</p></li><li><p>AuthorizationServerToken<br>接口，提供各个授权服务器的 token 访问</p></li><li><p>AuthorizationServer<br>实体类，实现了 token 访问和基本信息访问</p></li></ul><p><code>AuthorizationServer.java</code> 用于表示该客户端接入的某一个授权服务器。</p><p>考虑到客户端可能接入多个授权服务器，因此需要维护客户端在不同授权服务器中的基础信息。</p><p>基础信息包括：</p><ul><li>name, 标识不同授权服务器</li><li>client_id, 该授权服务器中的 client_id</li><li>client_secret, 该授权服务器中 client_secret</li><li>access_token_uri, 该授权服务器暴露的 token 获取端点</li><li>user_info_uri, 该资源服务器暴露的 user_info 获取端点</li><li>redirect_uri, 跳转地址</li><li>…</li></ul><h4 id="AuthorizationServerConfig"><a href="#AuthorizationServerConfig" class="headerlink" title="AuthorizationServerConfig"></a>AuthorizationServerConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiangchunbo.oauth2.client.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorizationServerConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回授权服务器的唯一标识，如 baidu、tencent</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权服务器的 authorize 端点地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> authorize_uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getAuthorizeUri</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权服务器的 scope</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> scope</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getScope</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权地址额外的自定义参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> params</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getCustomParams</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * access_token 获取地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> access_token_uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getAccessTokenUri</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该授权服务器中的 client_id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> client_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getClientId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该授权服务器中 client_secret</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> client_secret</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getClientSecret</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> redirect_uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getRedirectUri</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> user_info_uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getUserInfoUri</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AuthorizationServerToken"><a href="#AuthorizationServerToken" class="headerlink" title="AuthorizationServerToken"></a>AuthorizationServerToken</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiangchunbo.oauth2.client.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorizationServerToken</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储的 access token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> access token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getAccessToken</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储的 refresh token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> refresh token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getRefreshToken</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储的 access token 过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> access token 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getAccessTokenExpire</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储的 refresh token 过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> refresh token 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getRefreshTokenExpire</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AuthorizationServer"><a href="#AuthorizationServer" class="headerlink" title="AuthorizationServer"></a>AuthorizationServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServer</span> <span class="keyword">implements</span> <span class="title class_">AuthorizationServerConfig</span>, AuthorizationServerToken &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String authorizeUri;</span><br><span class="line">    <span class="keyword">private</span> String scope;</span><br><span class="line">    <span class="keyword">private</span> String customParams;</span><br><span class="line">    <span class="keyword">private</span> String accessTokenUri;</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="keyword">private</span> String clientSecret;</span><br><span class="line">    <span class="keyword">private</span> String redirectUri;</span><br><span class="line">    <span class="keyword">private</span> String userInfoUri;</span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line">    <span class="keyword">private</span> String refreshToken;</span><br><span class="line">    <span class="keyword">private</span> String accessTokenExpire;</span><br><span class="line">    <span class="keyword">private</span> String refreshTokenExpire;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCustomParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> customParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCustomParams</span><span class="params">(String customParams)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customParams = customParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getScope</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScope</span><span class="params">(String scope)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scope = scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessTokenUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessTokenUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessTokenUri</span><span class="params">(String accessTokenUri)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessTokenUri = accessTokenUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClientId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClientId</span><span class="params">(String clientId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientId = clientId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClientSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clientSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClientSecret</span><span class="params">(String clientSecret)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clientSecret = clientSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRedirectUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redirectUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedirectUri</span><span class="params">(String redirectUri)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redirectUri = redirectUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserInfoUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userInfoUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserInfoUri</span><span class="params">(String userInfoUri)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userInfoUri = userInfoUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthorizeUri</span><span class="params">(String authorizeUri)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authorizeUri = authorizeUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthorizeUri</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authorizeUri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessToken</span><span class="params">(String accessToken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessToken = accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRefreshToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRefreshToken</span><span class="params">(String refreshToken)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.refreshToken = refreshToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessTokenExpire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessTokenExpire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessTokenExpire</span><span class="params">(String accessTokenExpire)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.accessTokenExpire = accessTokenExpire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRefreshTokenExpire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> refreshTokenExpire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRefreshTokenExpire</span><span class="params">(String refreshTokenExpire)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.refreshTokenExpire = refreshTokenExpire;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="授权服务器配置-Bean"><a href="#授权服务器配置-Bean" class="headerlink" title="授权服务器配置 Bean"></a>授权服务器配置 Bean</h3><p>创建 Bean 时调用 init 方法从数据库加载所有配置到内存</p><blockquote><p>也可以考虑从配置文件加载</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerConfigProperties</span> <span class="keyword">extends</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, AuthorizationServerConfig&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AuthorizationServerMapper authorizationServerMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;AuthorizationServerConfig&gt; configs = authorizationServerMapper.selectAllConfig();</span><br><span class="line">        <span class="keyword">if</span> (configs != <span class="literal">null</span> &amp;&amp; !configs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (AuthorizationServerConfig config : configs) &#123;</span><br><span class="line">                <span class="built_in">this</span>.put(config.getName(), config);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAO-Mapper"><a href="#DAO-Mapper" class="headerlink" title="DAO(Mapper)"></a>DAO(Mapper)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorizationServerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据授权服务器的标识符从数据库访问信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 授权服务器标识符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 基本配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AuthorizationServerConfig <span class="title function_">selectConfigByName</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数据库取出所有的授权服务器配置信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 授权服务器配置信息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;AuthorizationServerConfig&gt; <span class="title function_">selectAllConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依据授权服务器的标识符从数据库取出信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 授权服务器标识符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 授权服务器信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AuthorizationServer <span class="title function_">selectByName</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据主键 Id 更新存储的授权服务器 token 信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authorizationServer token 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id                  主键 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateTokenById</span><span class="params">(<span class="meta">@Param(&quot;authorizationServer&quot;)</span> AuthorizationServer authorizationServer, <span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jiangchunbo.oauth2.client.mapper.AuthorizationServerMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateTokenById&quot;</span>&gt;</span></span><br><span class="line">        update `authorization_server`</span><br><span class="line">        set `access_token`=#&#123;authorizationServer.accessToken&#125;,</span><br><span class="line">            `access_token_expire`=#&#123;authorizationServer.accessTokenExpire&#125;,</span><br><span class="line">            `refresh_token`=#&#123;authorizationServer.refreshToken&#125;,</span><br><span class="line">            `refresh_token_expire` = #&#123;authorizationServer.refreshTokenExpire&#125;</span><br><span class="line">        where `id` = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectConfigByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jiangchunbo.oauth2.client.entity.AuthorizationServer&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from `authorization_server`</span><br><span class="line">        where `name` = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jiangchunbo.oauth2.client.entity.AuthorizationServer&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from `authorization_server`</span><br><span class="line">        where `name` = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllConfig&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jiangchunbo.oauth2.client.entity.AuthorizationServer&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from `authorization_server` where `is_del`=0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorizationServerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 token 相关信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authorizationServer token 信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id                  主键 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateTokenById</span><span class="params">(AuthorizationServer authorizationServer, Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 code 请求 access_token；如果缓存 token 未过期，则使用缓存 token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token code token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> access_token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getAccessToken</span><span class="params">(OAuthCodeToken token)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthorizationServerService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AuthorizationServerMapper authorizationServerMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">updateTokenById</span><span class="params">(AuthorizationServer authorizationServer, Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authorizationServerMapper.updateTokenById(authorizationServer, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessToken</span><span class="params">(OAuthCodeToken token)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> token.getName();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AuthorizationServer</span> <span class="variable">server</span> <span class="operator">=</span> authorizationServerMapper.selectByName(name);</span><br><span class="line">        <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;未找到 &quot;</span> + name + <span class="string">&quot; 相关的配置&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(server.getAccessToken()) &amp;&amp; <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).parse(server.getAccessTokenExpire()).after(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">            <span class="keyword">return</span> server.getAccessToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> token.getCode();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">OAuthClientRequest</span> <span class="variable">accessTokenRequest</span> <span class="operator">=</span> OAuthClientRequest.tokenLocation(server.getAccessTokenUri())</span><br><span class="line">                .setGrantType(GrantType.AUTHORIZATION_CODE)</span><br><span class="line">                .setClientId(server.getClientId())</span><br><span class="line">                .setClientSecret(server.getClientSecret())</span><br><span class="line">                .setCode(code)</span><br><span class="line">                .setRedirectURI(server.getRedirectUri())</span><br><span class="line">                .buildQueryMessage();</span><br><span class="line">        <span class="type">OAuthClient</span> <span class="variable">oAuthClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuthClient</span>(<span class="keyword">new</span> <span class="title class_">URLConnectionClient</span>());</span><br><span class="line">        <span class="type">OAuthAccessTokenResponse</span> <span class="variable">oAuthResponse</span> <span class="operator">=</span> oAuthClient.accessToken(accessTokenRequest, OAuth.HttpMethod.GET);</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> oAuthResponse.getAccessToken();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">refreshToken</span> <span class="operator">=</span> oAuthResponse.getRefreshToken();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expiresIn</span> <span class="operator">=</span> oAuthResponse.getExpiresIn();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">accessTokenExpire</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">                .format(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiresIn * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">refreshTokenExpire</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">                .format(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">10L</span> * <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">AuthorizationServer</span> <span class="variable">authorizationServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationServer</span>();</span><br><span class="line">        authorizationServer.setAccessToken(accessToken);</span><br><span class="line">        authorizationServer.setRefreshToken(refreshToken);</span><br><span class="line">        authorizationServer.setAccessTokenExpire(accessTokenExpire);</span><br><span class="line">        authorizationServer.setRefreshTokenExpire(refreshTokenExpire);</span><br><span class="line">        <span class="built_in">this</span>.updateTokenById(authorizationServer, server.getId());</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro-相关的准备"><a href="#Shiro-相关的准备" class="headerlink" title="Shiro 相关的准备"></a>Shiro 相关的准备</h3><h3 id="Shiro-配置类"><a href="#Shiro-配置类" class="headerlink" title="Shiro 配置类"></a>Shiro 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;shiro.web.enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Realm <span class="title function_">baiduOAuthRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BaiduOAuthRealm</span> <span class="variable">baiduOAuthRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaiduOAuthRealm</span>();</span><br><span class="line">        baiduOAuthRealm.setAuthenticationTokenClass(OAuthCodeToken.class);</span><br><span class="line">        <span class="keyword">return</span> baiduOAuthRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;oauth2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> OAuth2AuthenticationFilter <span class="title function_">oAuth2AuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OAuth2AuthenticationFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;OAuth2AuthenticationFilter&gt; <span class="title function_">oAuth2AuthenticationFilterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> FilterRegistrationBean&lt;OAuth2AuthenticationFilter&gt; registrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(oAuth2AuthenticationFilter());</span><br><span class="line">        registrationBean.setEnabled(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 chain definition</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> chainDefinition</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">chainDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;oauth2&quot;</span>);</span><br><span class="line">        chainDefinition.addPathDefinition(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chainDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AuthenticatingFilter"><a href="#AuthenticatingFilter" class="headerlink" title="AuthenticatingFilter"></a>AuthenticatingFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CODE_PARAM</span> <span class="operator">=</span> <span class="string">&quot;code&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">NAME_PARAM</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当 isAccessDenied 返回 true 时，回退到该方法，该方法一般会执行 login 逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否继续</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception executeLogin 抛出的一些异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> getSubject(request, response);</span><br><span class="line">        <span class="keyword">if</span> (!subject.isAuthenticated() &amp;&amp; !StringUtils.isEmpty(request.getParameter(CODE_PARAM))) &#123;</span><br><span class="line">            <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行 login 逻辑的时候创建的 token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行 login 的 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationToken <span class="title function_">createToken</span><span class="params">(ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(CODE_PARAM);</span><br><span class="line">        code = !StringUtils.isEmpty(code) ? code : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(NAME_PARAM);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OAuthCodeToken</span>(name, code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败的逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token    token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否继续过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onLoginFailure</span><span class="params">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> OAuthResponse.errorResponse(HttpServletResponse.SC_BAD_REQUEST)</span><br><span class="line">                    .setError(<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">                    .setErrorDescription(e.getMessage())</span><br><span class="line">                    .buildJSONMessage().getBody();</span><br><span class="line">            response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">            response.setCharacterEncoding(StandardCharsets.UTF_8.name());</span><br><span class="line">            response.getWriter().print(body);</span><br><span class="line">            response.getWriter().flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | OAuthSystemException ex) &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AuthenticationToken"><a href="#AuthenticationToken" class="headerlink" title="AuthenticationToken"></a>AuthenticationToken</h3><p>存储 code 以及 name 标识授权服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuthCodeToken</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationToken</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个授权服务器方的名字标识，如: baidu、tencent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OAuthCodeToken</span><span class="params">(String name, String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p><code>OAuthRealm</code> 提供基本的 OAuth2 获取用户名的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OAuthRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthenticatingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AuthorizationServerConfigProperties authorizationServerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    AuthorizationServerService authorizationServerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 确保 token 中的 credential 与 authentication info 的 credentials 一致，否则后面验证会出错</span></span><br><span class="line">        <span class="type">OAuthCodeToken</span> <span class="variable">codeToken</span> <span class="operator">=</span> (OAuthCodeToken) token;</span><br><span class="line">        <span class="type">SimpleAuthenticationInfo</span> <span class="variable">authenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> extractUsername(codeToken);</span><br><span class="line">            authenticationInfo.setPrincipals(<span class="keyword">new</span> <span class="title class_">SimplePrincipalCollection</span>(username, getName()));</span><br><span class="line">            authenticationInfo.setCredentials(codeToken.getCode());</span><br><span class="line">            <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title function_">extractUsername</span><span class="params">(OAuthCodeToken codeToken)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BaiduOAuthRealm</code> 实现了 <code>OAuthRealm</code>，返回 netdisk_name 名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaiduOAuthRealm</span> <span class="keyword">extends</span> <span class="title class_">OAuthRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">extractUsername</span><span class="params">(OAuthCodeToken codeToken)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">OAuthClient</span> <span class="variable">oAuthClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuthClient</span>(<span class="keyword">new</span> <span class="title class_">URLConnectionClient</span>());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> authorizationServerService.getAccessToken(codeToken);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AuthorizationServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> authorizationServerProperties.get(codeToken.getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 保存 access_token 和 expires in</span></span><br><span class="line">            <span class="type">OAuthClientRequest</span> <span class="variable">userInfoRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OAuthBearerClientRequest</span>(serverConfig.getUserInfoUri())</span><br><span class="line">                    .setAccessToken(accessToken)</span><br><span class="line">                    .buildQueryMessage();</span><br><span class="line">            <span class="type">OAuthResourceResponse</span> <span class="variable">resourceResponse</span> <span class="operator">=</span> oAuthClient.resource(userInfoRequest, OAuth.HttpMethod.GET, OAuthResourceResponse.class);</span><br><span class="line">            <span class="keyword">final</span> Map&lt;String, Object&gt; data = JSONUtils.parseJSON(resourceResponse.getBody());</span><br><span class="line">            <span class="keyword">return</span> data.get(<span class="string">&quot;netdisk_name&quot;</span>).toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OAuthSystemException | OAuthProblemException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Client&quot;&gt;&lt;a href=&quot;#Client&quot; class=&quot;headerlink&quot; title=&quot;Client&quot;&gt;&lt;/a&gt;Client&lt;/h2&gt;&lt;h3 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OAuth2 设计</title>
    <link href="http://example.com/2022/08/03/Security/OAuth2-%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/08/03/Security/OAuth2-%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-08-03T12:02:33.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OAuth2-设计"><a href="#OAuth2-设计" class="headerlink" title="OAuth2 设计"></a>OAuth2 设计</h1><h2 id="暴露的端点"><a href="#暴露的端点" class="headerlink" title="暴露的端点"></a>暴露的端点</h2><ul><li><p>GET &#x2F;oauth&#x2F;authorize<br>该端点采用 GET 请求，主要是让用户能够跳转到授权页面。</p></li><li><p>GET &#x2F;oauth&#x2F;confirm_access<br>提供用户确认授权的视图</p></li><li><p>POST &#x2F;oauth&#x2F;authorize<br>用户确认授权</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OAuth2-设计&quot;&gt;&lt;a href=&quot;#OAuth2-设计&quot; class=&quot;headerlink&quot; title=&quot;OAuth2 设计&quot;&gt;&lt;/a&gt;OAuth2 设计&lt;/h1&gt;&lt;h2 id=&quot;暴露的端点&quot;&gt;&lt;a href=&quot;#暴露的端点&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring MVC ReturnValueHandler 原理</title>
    <link href="http://example.com/2022/07/30/Spring-Framework/Spring-MVC-ReturnValueHandlerr-%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/07/30/Spring-Framework/Spring-MVC-ReturnValueHandlerr-%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-30T09:28:13.000Z</published>
    <updated>2022-09-07T13:43:59.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC-ReturnValueHandler-原理"><a href="#Spring-MVC-ReturnValueHandler-原理" class="headerlink" title="Spring MVC ReturnValueHandler 原理"></a>Spring MVC ReturnValueHandler 原理</h1><p>本文章中提及的 ReturnValueHandler 实际为 <code>HandlerMethodReturnValueHandler</code> 类型。</p><p>该 <code>ReturnValueHandler</code> 会在调用 handler 方法的时候发挥作用，其中通过以下代码注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入类型为 HandlerMethodReturnValueHandlerComposite，是一个具有许多 ReturnValueHandler 的类型</span></span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br></pre></td></tr></table></figure><h2 id="Handler-Method-处理框架"><a href="#Handler-Method-处理框架" class="headerlink" title="Handler Method 处理框架"></a>Handler Method 处理框架</h2><p>以下是 handler 方法被调用的整体流程: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 调用 handler，获得返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    setResponseStatus(webRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class="literal">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class="line">        <span class="comment">// 与 ResponseStatus 相关</span></span><br><span class="line">        mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mavContainer.setRequestHandled(<span class="literal">false</span>);</span><br><span class="line">    Assert.state(<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>, <span class="string">&quot;No return value handlers&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理返回值</span></span><br><span class="line">        <span class="built_in">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class="line">                returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Return-Value-处理框架"><a href="#Return-Value-处理框架" class="headerlink" title="Return Value 处理框架"></a>Return Value 处理框架</h2><p>若要处理返回值，需要找到合适的返回值处理器，然后调用其 <code>handleReturnValue</code> 方法进行处理，以下是处理返回值的整体流程代码清单:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HandlerMethodReturnValueHandlerComposite</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断-Return-Value-是否支持"><a href="#判断-Return-Value-是否支持" class="headerlink" title="判断 Return Value 是否支持"></a>判断 Return Value 是否支持</h2><p>关于如何判断一个 <code>ReturnValueHandler</code> 是否支持这种返回值，主要是通过自定义实现的方法 <code>supportsReturnType</code> 完成，以下是挑选合适 <code>ReturnValueHandler</code> 的代码清单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> HandlerMethodReturnValueHandler <span class="title function_">selectHandler</span><span class="params">(<span class="meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isAsyncValue</span> <span class="operator">=</span> isAsyncReturnValue(value, returnType);</span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="built_in">this</span>.returnValueHandlers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAsyncValue &amp;&amp; !(handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>是否支持该返回值，具体逻辑根据不同 <code>ReturnValueHandler</code> 有所不同，但一般来说都是通过类型判断</p></blockquote><p>应该注意到，<code>selectHandler</code> 会首先调用 <code>isAsyncReturnValue</code> 判断是否是一个异步返回值，但默认情况下，始终返回 false，因为并不存在 <code>AsyncHandlerMethodReturnValueHandler</code> 实例，<code>isAsyncReturnValue</code> 逻辑如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAsyncReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (HandlerMethodReturnValueHandler handler : <span class="built_in">this</span>.returnValueHandlers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> AsyncHandlerMethodReturnValueHandler &amp;&amp;</span><br><span class="line">                ((AsyncHandlerMethodReturnValueHandler) handler).isAsyncReturnValue(value, returnType)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-支持的返回值"><a href="#Spring-MVC-支持的返回值" class="headerlink" title="Spring MVC 支持的返回值"></a>Spring MVC 支持的返回值</h2><ul><li><code>ModelAndView</code> 对象</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-MVC-ReturnValueHandler-原理&quot;&gt;&lt;a href=&quot;#Spring-MVC-ReturnValueHandler-原理&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC ReturnValueHandle</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>获取用户 IP</title>
    <link href="http://example.com/2022/07/28/%E5%B7%A5%E5%85%B7/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7-IP/"/>
    <id>http://example.com/2022/07/28/%E5%B7%A5%E5%85%B7/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7-IP/</id>
    <published>2022-07-28T03:34:25.000Z</published>
    <updated>2022-09-07T13:43:59.981Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">getIp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">$ips = array();</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>]) &#123;</span><br><span class="line">$ips[] = $_SERVER[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) &#123;</span><br><span class="line">$tmp = explode(<span class="string">&#x27;, &#x27;</span>, $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">$ips = array_merge($ips, $tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &#123;</span><br><span class="line">$ips[] = $_SERVER[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">$ip = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">foreach ($ips <span class="type">as</span> <span class="variable">$k</span> <span class="operator">=</span>&gt; $v) &#123;</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^(10|172\.16|192\.168)\./&#x27;</span>, $v) &amp;&amp; strtolower($v) != <span class="string">&#x27;unknown&#x27;</span>) &#123;</span><br><span class="line">$ip = $v;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>短信接口防盗用</title>
    <link href="http://example.com/2022/07/27/Security/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E9%98%B2%E7%9B%97%E7%94%A8/"/>
    <id>http://example.com/2022/07/27/Security/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E9%98%B2%E7%9B%97%E7%94%A8/</id>
    <published>2022-07-27T08:49:03.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    <content type="html"><![CDATA[<ol><li>校验 Referer 头部</li><li>签名校验</li><li>mobile 参数可以略微进行 AES 加密等，增加复杂度</li><li>IP + UA 限制次数<br>例如，使用 Redis 记录次数</li></ol><p>假设 key 特定前缀是 code_send_limit_</p><p>key &#x3D; code_send_limit_ + <code>&lt;IP 和 UA 的混合&gt;</code><br>value &#x3D; 次数</p><blockquote><p>incr  expireAt</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrequencyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxLimit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> periodInSeconds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FrequencyInterceptor</span><span class="params">(<span class="type">int</span> maxLimit, <span class="type">int</span> periodInSeconds, RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxLimit = maxLimit;</span><br><span class="line">        <span class="built_in">this</span>.periodInSeconds = periodInSeconds;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ipAddr</span> <span class="operator">=</span> IpUtil.getIpAddr(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userAgent</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md5</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] digest = md5.digest((ipAddr + userAgent).getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ipAndUa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md5.digest()).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;send_msg_limit:&quot;</span> + ipAndUa;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">limit</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (limit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处可能高并发</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">newValue</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(key);</span><br><span class="line">            <span class="keyword">if</span> (newValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 出错</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;网络繁忙，请稍后重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 只需考虑第一个设置过期时间</span></span><br><span class="line">            <span class="keyword">if</span> (newValue == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, Duration.ofSeconds(periodInSeconds));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newValue &lt;= maxLimit) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是溢出请求，全部打回</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;操作频繁，请稍后重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (limit &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">// 一般情况，溢出打回</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;操作频繁，请稍后重试&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">newValue</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(key);</span><br><span class="line">            <span class="keyword">if</span> (newValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;网络繁忙，请稍后重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newValue &lt;= maxLimit) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;操作频繁，请稍后重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;校验 Referer 头部&lt;/li&gt;
&lt;li&gt;签名校验&lt;/li&gt;
&lt;li&gt;mobile 参数可以略微进行 AES 加密等，增加复杂度&lt;/li&gt;
&lt;li&gt;IP + UA 限制次数&lt;br&gt;例如，使用 Redis 记录次数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设 key 特</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Framework Integration</title>
    <link href="http://example.com/2022/07/27/Spring-Framework/Spring-Framework-Integration/"/>
    <id>http://example.com/2022/07/27/Spring-Framework/Spring-Framework-Integration/</id>
    <published>2022-07-27T08:11:28.000Z</published>
    <updated>2022-09-07T13:43:59.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#spring-integration">Integration</a></h1><hr><h2 id="Message-Conversion"><a href="#Message-Conversion" class="headerlink" title="Message Conversion"></a><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#rest-message-conversion">Message Conversion</a></h2><p>WebMvcConfigurationSupport 内含默认的 Converter</p><p>BufferedImageHttpMessageConverter 返回图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/image/&#123;id&#125;&quot;, produces = MediaType.IMAGE_JPEG_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> BufferedImage <span class="title function_">getImage</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Weather</span> <span class="variable">weather</span> <span class="operator">=</span> weatherMapper.getById(id);</span><br><span class="line">    <span class="keyword">return</span> ImageIO.read(weather.getPicture());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Mail"><a href="#6-Mail" class="headerlink" title="6. Mail"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#mail">6. Mail</a></h2><p>Spring Boot 的使用方式：</p><p>(1) 配置并将 <code>JavaMailSender</code> 注入到 IOC 容器，类似一个 Mail 工厂配置，可以 getSession，也可以 createMimeMessage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaMailConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;javaMailSender&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JavaMailSenderImpl <span class="title function_">javaMailSender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JavaMailSenderImpl</span> <span class="variable">javaMailSender</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaMailSenderImpl</span>(); <span class="comment">// 唯一的实现</span></span><br><span class="line">        javaMailSender.setHost(<span class="string">&quot;smtp.qq.com&quot;</span>); <span class="comment">// 设置 SMTP 主机</span></span><br><span class="line">        javaMailSender.setUsername(<span class="string">&quot;945086245@qq.com&quot;</span>);</span><br><span class="line">        javaMailSender.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        javaMailSender.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> javaMailSender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 使用 javaMailSender 发送。MimeMessageHelper 类似 Builder 设计，但是没有做链式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line"><span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">mimeMessageHelper.setFrom(<span class="string">&quot;945086245@qq.com&quot;</span>); <span class="comment">// 发送人</span></span><br><span class="line">mimeMessageHelper.setTo(email); <span class="comment">// 接收人</span></span><br><span class="line">mimeMessageHelper.setSubject(<span class="string">&quot;验证码&quot;</span>);</span><br><span class="line">mimeMessageHelper.setText(<span class="string">&quot;您的验证码是: 9836, 如非本人操作请忽视。&quot;</span>);</span><br><span class="line">javaMailSender.send(mimeMessage);</span><br></pre></td></tr></table></figure><h2 id="7-Task-Execution-and-Scheduling"><a href="#7-Task-Execution-and-Scheduling" class="headerlink" title="7. Task Execution and Scheduling"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#scheduling">7. Task Execution and Scheduling</a></h2><p>Spring Framework 分别使用 <code>TaskExecutor</code> 和 <code>TaskScheduler</code> 接口为异步执行和任务调度提供了抽象。Spring 还具有那些支持线程池的接口实现或在应用程序服务器环境中委托 CommonJ。最终，通用接口之间的这些实现的使用抽象出了 Java SE5，Java SE 6 以及 Java EE 环境的差异。</p><p>Spring 还具有支持使用 <code>Timer</code> 调度的集成类，以及 Quartz Scheduler。你可以通过使用 <code>FactoryBean</code>，可选的分别对 <code>Timer</code> 或者 <code>Trigger</code> 实例的引用设置这两个调度器。此外，用于 Quartz 调度器和 <code>Timer</code> 的便利类是可用的，它让你调用现存的目标对象的方法（类似于普通的 <code>MethodInvokingFactoryBean</code> 操作）。</p><h3 id="7-1-The-Spring-TaskExecutor-Abstraction"><a href="#7-1-The-Spring-TaskExecutor-Abstraction" class="headerlink" title="7.1. The Spring TaskExecutor Abstraction"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#scheduling-task-executor">7.1. The Spring TaskExecutor Abstraction</a></h3><p>Executor 是 JDK 用于线程池概念的名称。之所以叫 “executor” 是因为实际上不能保证底层的实现就是池。一个 executor 可以是单线程，甚至是同步的。Spring 的抽象隐藏了 Java SE 和 Java EE 环境之间的实现细节。</p><p>Spring 的 <code>TaskExecutor</code> 接口与 <code>java.util.concurrent.Executor</code> 接口相同。实际上，最初其主要存在的原因就是在使用线程池的时候抽象出对 Java 5 的需求。该接口只有一个方法（<code>execute(Runnable task)</code>），该方法接受给予线程池的语义和配置的任务。</p><h4 id="7-1-1-TaskExecutor-Types"><a href="#7-1-1-TaskExecutor-Types" class="headerlink" title="7.1.1. TaskExecutor Types"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#scheduling-task-executor-types">7.1.1. TaskExecutor Types</a></h4><p>Spring 包含了许多预置的 <code>TaskExecutor</code> 实现。很有可能，你永远不需要实现自己的类。Spring 提供的变体如下：</p><ul><li><p><code>SyncTaskExecutor</code>: 此实现不会异步运行调用。相反，每个调用都发生在调用线程中。它主要用于不需要多线程的情况，例如在简单的测试用例中。</p></li><li><p><code>ThreadPoolTaskExecutor</code>: 此实现最常用。它暴露了用于配置 <code>java.util.concurrent.ThreadPoolExecutor</code> 的 Bean 属性，并将其包装在 <code>TaskExecutor</code> 中。如果你需要适应其他类型的 <code>java.util.concurrent.Executor</code>，我们建议你改用 <code>ConcurrentTaskExecutor</code>。</p></li></ul><h4 id="7-1-2-Using-a-TaskExecutor"><a href="#7-1-2-Using-a-TaskExecutor" class="headerlink" title="7.1.2. Using a TaskExecutor"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#scheduling-task-executor-usage">7.1.2. Using a TaskExecutor</a></h4><p>Spring 的 <code>TaskExecutor</code> 实现被用作简单的 Java Bean。在下面的示例中，我们定义了一个使用 <code>ThreadPoolTaskExecutor</code> 的 Bean，异步地打印一组消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.core.task.TaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExecutorExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MessagePrinterTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MessagePrinterTask</span><span class="params">(String message)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TaskExecutor taskExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TaskExecutorExample</span><span class="params">(TaskExecutor taskExecutor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskExecutor = taskExecutor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMessages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">            taskExecutor.execute(<span class="keyword">new</span> <span class="title class_">MessagePrinterTask</span>(<span class="string">&quot;Message&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，你没有从池中检索线程并自己执行，而是将你的 <code>Runnable</code> 添加到队列中。然后 <code>TaskExecutor</code> 使用其内部规则来决定任务何时运行。</p><p>为了配置 <code>TaskExecutor</code> 使用的规则，我们将公开简单的 Bean 属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskExecutor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;corePoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;queueCapacity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskExecutorExample&quot;</span> <span class="attr">class</span>=<span class="string">&quot;TaskExecutorExample&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;taskExecutor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-The-Spring-TaskScheduler-Abstraction"><a href="#7-2-The-Spring-TaskScheduler-Abstraction" class="headerlink" title="7.2. The Spring TaskScheduler Abstraction"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#scheduling-task-scheduler">7.2. The Spring TaskScheduler Abstraction</a></h3><p>除了 <code>TaskExecutor</code> 抽象外，</p><h2 id="8-Cache-Abstraction"><a href="#8-Cache-Abstraction" class="headerlink" title="8. Cache Abstraction"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache">8. Cache Abstraction</a></h2><h3 id="8-1-Understanding-the-Cache-Abstraction"><a href="#8-1-Understanding-the-Cache-Abstraction" class="headerlink" title="8.1. Understanding the Cache Abstraction"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-strategies">8.1. Understanding the Cache Abstraction</a></h3><p><strong>Buffer 和 Cache</strong></p><p>一般地，buffer 可以翻译为缓冲区，用于高速与低速的实体之间的中间存储，缓冲区至少对知晓它的一方是可见的。</p><p>cache 可以翻译为缓存，根据定义是隐藏的，任何一方都不知晓。</p><p><strong>Spring 提供了一些缓存抽象的实现</strong>：</p><ul><li>SimpleCacheConfiguration</li><li>EhCacheCacheConfiguration</li><li>GenericCacheConfiguration</li><li>RedisCacheConfiguration</li><li>…</li></ul><p>SpringBoot <code>CacheAutoConfiguration</code> 中使用 <code>@Import</code> 导入了 <code>CacheConfigurationImportSelector.class</code>，其中导入了枚举类 <code>CacheType</code> 中所有的缓存类型。</p><p><strong>SimpleCacheConfiguration</strong></p><p>底层使用 <code>concurrentMap</code> 实现，见 <code>SimpleCacheConfiguration</code>  注入 <code>ConcurrentMapCacheManager</code>。<code>ConcurrentMapCacheManager </code> 属性 <code>dynamic</code> 可以配置 <code>cacheName</code> 是否可以动态生成，默认为 true。</p><h3 id="8-2-Declarative-Annotation-based-Caching"><a href="#8-2-Declarative-Annotation-based-Caching" class="headerlink" title="8.2. Declarative Annotation-based Caching"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations">8.2. Declarative Annotation-based Caching</a></h3><p>Spring 缓存抽象提供了一组 Java 注解：</p><ul><li><code>@Cacheable</code>：触发缓存填充</li><li><code>@CacheEvict</code>：触发缓存驱逐</li><li><code>@CachePut</code>：在不干扰方法执行的情况下更新缓存</li><li><code>@Caching</code>：重新组合要应用于方法的多个缓存操作</li><li><code>@CacheConfig</code>：在类级别共享一些常见的缓存相关设置</li></ul><h4 id="8-2-1-The-Cacheable-Annotation"><a href="#8-2-1-The-Cacheable-Annotation" class="headerlink" title="8.2.1. The @Cacheable Annotation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations-cacheable">8.2.1. The @Cacheable Annotation</a></h4><table><thead><tr><th align="left">注解属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">value &#x2F; cacheNames</td><td align="left">缓存的名字</td></tr><tr><td align="left">key</td><td align="left">缓存数据使用的 key，默认使用方法参数</td></tr><tr><td align="left">keyGenerator</td><td align="left">自定义 key 生成器，实现 KeyGenerator</td></tr><tr><td align="left">cacheManager</td><td align="left">指定缓存管理器</td></tr><tr><td align="left">condition</td><td align="left">指定符合条件的情况下才缓存</td></tr><tr><td align="left">unless</td><td align="left">缓存的否定条件</td></tr><tr><td align="left">sync</td><td align="left">是否使用异步模式</td></tr></tbody></table><h5 id="Default-Key-Generation"><a href="#Default-Key-Generation" class="headerlink" title="Default Key Generation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations-cacheable-default-key">Default Key Generation</a></h5><p>key 默认采用 <code>SimpleKeyGenerator</code> 生成。以方法参数为标识。</p><h5 id="Synchronized-Caching"><a href="#Synchronized-Caching" class="headerlink" title="Synchronized Caching"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations-cacheable-synchronized">Synchronized Caching</a></h5><p>Spring Core 框架的 <code>CacheManager</code> 实现都支持 sync。其他缓存库未必。</p><h5 id="Available-Caching-SpEL-Evaluation-Context"><a href="#Available-Caching-SpEL-Evaluation-Context" class="headerlink" title="Available Caching SpEL Evaluation Context"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-spel-context">Available Caching SpEL Evaluation Context</a></h5><p>Cache SpEL 可用元数据，具体见官方表。</p><h4 id="8-2-2-The-CachePut-Annotation"><a href="#8-2-2-The-CachePut-Annotation" class="headerlink" title="8.2.2. The @CachePut Annotation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations-put">8.2.2. The @CachePut Annotation</a></h4><p>每次都调用方法，缓存结果。</p><h4 id="8-2-3-The-CacheEvict-annotation"><a href="#8-2-3-The-CacheEvict-annotation" class="headerlink" title="8.2.3. The @CacheEvict annotation"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotations-evict">8.2.3. The @CacheEvict annotation</a></h4><p>清空缓存</p><h4 id="8-2-6-Enabling-Caching-Annotations"><a href="#8-2-6-Enabling-Caching-Annotations" class="headerlink" title="8.2.6. Enabling Caching Annotations"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-annotation-enable">8.2.6. Enabling Caching Annotations</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-JCache-JSR-107-Annotations"><a href="#8-3-JCache-JSR-107-Annotations" class="headerlink" title="8.3. JCache (JSR-107) Annotations"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-jsr-107">8.3. JCache (JSR-107) Annotations</a></h3><p>从 Spring 4.1 开始，Spring 缓存抽象完全支持 JCache 注解</p><h4 id="8-3-1-Feature-Summary"><a href="#8-3-1-Feature-Summary" class="headerlink" title="8.3.1. Feature Summary"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#cache-jsr-107-summary">8.3.1. Feature Summary</a></h4><table><thead><tr><th align="left">Spring</th><th align="left">JSR-107</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">@Cacheable</td><td align="left">@CacheResult</td><td align="left"></td></tr><tr><td align="left">@CachePut</td><td align="left">@CachePut</td><td align="left"></td></tr><tr><td align="left">@CacheEvict</td><td align="left">@CacheRemove</td><td align="left"></td></tr><tr><td align="left">@CacheEvict(allEntries&#x3D;true)</td><td align="left">@CacheRemoveAll</td><td align="left"></td></tr><tr><td align="left">@CacheConfig</td><td align="left">@CacheDefaults</td><td align="left"></td></tr></tbody></table><p>JCache 的 CacheResolver 概念上与 Spring CacheResolver 接口相同，只是 JCache 仅支持单个 Cache。默认，Simple 实现会根据注解上的名称检索要使用的 Cache，如果注解上没有指定名称，则会自动生成一个默认值。</p><h4 id="8-3-2-Enabling-JSR-107-Support"><a href="#8-3-2-Enabling-JSR-107-Support" class="headerlink" title="8.3.2. Enabling JSR-107 Support"></a><a href="https://docs.spring.io/spring-framework/docs/5.2.17.RELEASE/spring-framework-reference/integration.html#enabling-jsr-107-support">8.3.2. Enabling JSR-107 Support</a></h4><p>如果类路径同时存在 JSR-107 API 和 spring-context-support，<code>@EnableCaching</code> 和 <code>cache:annotation-driven</code> 都会自启用 JCache。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Integration&quot;&gt;&lt;a href=&quot;#Integration&quot; class=&quot;headerlink&quot; title=&quot;Integration&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RFC 6749</title>
    <link href="http://example.com/2022/07/26/RFC/RFC-6749/"/>
    <id>http://example.com/2022/07/26/RFC/RFC-6749/</id>
    <published>2022-07-26T11:56:44.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    <content type="html"><![CDATA[<p>1.1. Roles 角色</p><p>OAuth 定义了四个角色：</p><ul><li>resource owner 资源拥有者:</li></ul><p>一个实体，其能够授予受保护的资源的访问权限。当 resource owner 是一个人，他被称之为一个终端用户。</p><ul><li>resource server 资源服务器</li></ul><p>一个服务，其托管受保护的资源，能够接受并响应使用 access token 进行受保护资源的请求。</p><ul><li>client 客户端</li></ul><p>一个应用，代表资源拥有者发出受保护资源的请求，并使用其授权。术语 “client” 并不表示任何特别的实现特征（例如，不论该应用在服务器，桌面，或者其他设备上执行）。</p><ul><li>authorization server</li></ul><p>一个服务，在成功认证了  并获得了授权之后，颁发 access_token 给 client。</p><p>OAuth 定义了四种授予类型:</p><ul><li>authorization code，授权码</li><li>implicit，隐藏式</li><li>resource owner password credentials，密码</li><li>client credentials，凭证式</li></ul><h2 id="authorization-code"><a href="#authorization-code" class="headerlink" title="authorization code"></a>authorization code</h2><blockquote><p>企业微信的授权与 code 很类似，但有所不同。企业微信 code 并不是换取 access_token，而是换取 userid。也就是，一般的 OAuth2，code 与 user 有关联，code 换取的 access_token 与 user 也有关联，用户可以通过 access_token 访问自己权限下的信息。 </p></blockquote><h2 id="resource-owner-password-credentials，密码"><a href="#resource-owner-password-credentials，密码" class="headerlink" title="resource owner password credentials，密码"></a>resource owner password credentials，密码</h2><p>A 网站直接要求用户提供 B 网站的用户名和密码。拿到之后，A 直接向 B 请求令牌。</p><h2 id="client-credentials，客户端凭证式"><a href="#client-credentials，客户端凭证式" class="headerlink" title="client credentials，客户端凭证式"></a>client credentials，客户端凭证式</h2><p>适用于没有前端的命令行应用。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><p>企业微信的 access_token 获取类似于这种方式</p><p>(A) client 通过将 resource owner 的 user-agent 重定向到 authorization 后端，开始流程。client 包含它的 client identifier，requested scope，local state，以及一个 redirection uri，一旦授权（或者拒绝）该访问，授权服务器会把 user-agent 发回该 uri。</p><blockquote><p>client 可以认为是第三方应用的页面（上面具有一个授权按钮），用户点击该按钮，就会跳转到授权服务器，同时会附带一些参数。</p></blockquote><p>(B) 授权服务器认证 resource owner，并确定 resource owner 是授权还是拒绝 client 的范围请求。</p><p>(C) 假设 resource owner 授权访问，授权服务器使用之前提供的 redirection uri 将 user-agent 重定向回 client。redirection uri 包含 authorization code 以及之前 client 提供的任何本地状态。</p><blockquote><p>code 的实现可以是 UUID、UUID+MD5 等</p></blockquote><p>(D) client 通过前面步骤获得的 authorization code 从授权服务器的 token 后端请求 access token。当发出请求时，client 使用授权服务器认证。client 包含 redirection URI ，用于获取进行验证的授权码。</p><p>(E) 授权服务器认证客户端，验证授权码，确保接受到的 redirection URI  </p><h1 id="10-Security-Considerations"><a href="#10-Security-Considerations" class="headerlink" title="10. Security Considerations"></a>10. Security Considerations</h1><h2 id="10-4-Refresh-Tokens"><a href="#10-4-Refresh-Tokens" class="headerlink" title="10.4. Refresh Tokens"></a>10.4. Refresh Tokens</h2><p>Authorization Server 可以（MAY）给 Web 应用客户端和本地应用客户端颁发 Refresh Token。</p><p>Refresh Token 必须（MUST）在运输和存储的过程中保密，并且仅仅在 Authorization Server 和颁发了 Refresh Token 的客户端之间共享。Authorzation Server 必须（MUST） 维护 Refresh Token 和颁发了 Refresh Token 的客户端之间的绑定关系。Refresh Token 必须（MUST）只能使用 TLS 传输。??</p><p>每当客户身份可以验证时，Authorzation Server 必须（MUST）验证 Refresh Token 和客户身份之间的绑定关系。当无法进行客户端认证时，Authorization Server 应当（SHOULD）调配其他方案，以检测 Refresh Token 滥用。</p><p>例如，Authorization Server 可以使用 Refresh Token 循环，每个 access Token 刷新响应就在循环中颁发一个新的 Refresh Token。前一个 Refresh Token 失效，但是还会被 Authorization Server 保留。如果一个 Refresh Token 被渗透了，随后都被攻击者和合法客户端使用，其中一个会出现无效的 Refresh Token，它将告知授权服务器违规。</p><p><em>授权服务器</em>必须确保 Refresh Token 不能被生成，篡改，或者猜测以生成有效的刷新令牌。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.1. Roles 角色&lt;/p&gt;
&lt;p&gt;OAuth 定义了四个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resource owner 资源拥有者:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个实体，其能够授予受保护的资源的访问权限。当 resource owner 是一个人，他被称之为一个终</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>yum 的使用</title>
    <link href="http://example.com/2022/07/25/Linux/yum-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/07/25/Linux/yum-%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-25T08:39:13.000Z</published>
    <updated>2022-09-07T13:43:59.975Z</updated>
    
    <content type="html"><![CDATA[<p>更新所有已安装的 rpm 包<br>yum -y update</p><p>yum clean all</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;更新所有已安装的 rpm 包&lt;br&gt;yum -y update&lt;/p&gt;
&lt;p&gt;yum clean all&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis 面试预备</title>
    <link href="http://example.com/2022/07/24/%E9%9D%A2%E8%AF%95/Redis-%E9%9D%A2%E8%AF%95%E9%A2%84%E5%A4%87/"/>
    <id>http://example.com/2022/07/24/%E9%9D%A2%E8%AF%95/Redis-%E9%9D%A2%E8%AF%95%E9%A2%84%E5%A4%87/</id>
    <published>2022-07-24T10:38:41.000Z</published>
    <updated>2022-09-07T13:43:59.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-面试预备"><a href="#Redis-面试预备" class="headerlink" title="Redis 面试预备"></a>Redis 面试预备</h1><h2 id="为什么用-Redis"><a href="#为什么用-Redis" class="headerlink" title="为什么用 Redis"></a>为什么用 Redis</h2><ul><li>高并发</li><li>高可用</li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存穿透: 缓存中查不到，数据库中也差不多</p><p>解决方案: 1. 对参数进行合法性校验 2. 将数据库中没有查到的也写入到缓存</p><p>为了防止缓存垃圾，这一类的缓存可以设置短一些</p><blockquote><p>BloomFilter ，MySQL 的 id 引入该过滤器。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li><p>缓存</p></li><li><p>记录用户在线人数</p></li></ol><p>使用 zSet 结构</p><p>用户每次调用接口，在鉴权的时候刷新一次该用户 user_id 对应的 score</p><p>定时脚本，删除过期的数据:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$redis</span>-&gt;<span class="title function_ invoke__">zRemRangeByScore</span>(REDIS_ONLINE_USER, <span class="number">0</span>, <span class="title function_ invoke__">time</span>() - <span class="number">5200</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis-面试预备&quot;&gt;&lt;a href=&quot;#Redis-面试预备&quot; class=&quot;headerlink&quot; title=&quot;Redis 面试预备&quot;&gt;&lt;/a&gt;Redis 面试预备&lt;/h1&gt;&lt;h2 id=&quot;为什么用-Redis&quot;&gt;&lt;a href=&quot;#为什么用-Redis&quot;</summary>
      
    
    
    
    
    <category term="Redis" scheme="http://example.com/tags/Redis/"/>
    
  </entry>
  
</feed>
